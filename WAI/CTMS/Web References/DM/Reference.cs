//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace CTMS.DM {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DMSoap", Namespace="http://tempuri.org/")]
    public partial class DM : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DM_AUDITTRAIL_SPOperationCompleted;
        
        private System.Threading.SendOrPostCallback DM_INSERT_MODULE_DATA_SPOperationCompleted;
        
        private System.Threading.SendOrPostCallback DM_GetSetPVOperationCompleted;
        
        private System.Threading.SendOrPostCallback DM_DELETE_RECORDS_SPOperationCompleted;
        
        private System.Threading.SendOrPostCallback CODING_SPOperationCompleted;
        
        private System.Threading.SendOrPostCallback DM_SAE_SYNC_SPOperationCompleted;
        
        private System.Threading.SendOrPostCallback DM_COMPLETE_DATA_SPOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DM() {
            this.Url = global::CTMS.Properties.Settings.Default.CTMS_DM_DM;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event DM_AUDITTRAIL_SPCompletedEventHandler DM_AUDITTRAIL_SPCompleted;
        
        /// <remarks/>
        public event DM_INSERT_MODULE_DATA_SPCompletedEventHandler DM_INSERT_MODULE_DATA_SPCompleted;
        
        /// <remarks/>
        public event DM_GetSetPVCompletedEventHandler DM_GetSetPVCompleted;
        
        /// <remarks/>
        public event DM_DELETE_RECORDS_SPCompletedEventHandler DM_DELETE_RECORDS_SPCompleted;
        
        /// <remarks/>
        public event CODING_SPCompletedEventHandler CODING_SPCompleted;
        
        /// <remarks/>
        public event DM_SAE_SYNC_SPCompletedEventHandler DM_SAE_SYNC_SPCompleted;
        
        /// <remarks/>
        public event DM_COMPLETE_DATA_SPCompletedEventHandler DM_COMPLETE_DATA_SPCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DM_AUDITTRAIL_SP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DM_AUDITTRAIL_SP(
                    string ACTION, 
                    string PVID, 
                    string RECID, 
                    string SUBJID, 
                    string VISITNUM, 
                    string MODULEID, 
                    string VARIABLENAME, 
                    string REASON, 
                    string FIELDNAME, 
                    string INVID, 
                    string VISIT, 
                    string MODULENAME, 
                    string TRANSACT, 
                    string FIELDID, 
                    string ID, 
                    string USERID, 
                    string User_Name, 
                    string TZ_VAL) {
            object[] results = this.Invoke("DM_AUDITTRAIL_SP", new object[] {
                        ACTION,
                        PVID,
                        RECID,
                        SUBJID,
                        VISITNUM,
                        MODULEID,
                        VARIABLENAME,
                        REASON,
                        FIELDNAME,
                        INVID,
                        VISIT,
                        MODULENAME,
                        TRANSACT,
                        FIELDID,
                        ID,
                        USERID,
                        User_Name,
                        TZ_VAL});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DM_AUDITTRAIL_SPAsync(
                    string ACTION, 
                    string PVID, 
                    string RECID, 
                    string SUBJID, 
                    string VISITNUM, 
                    string MODULEID, 
                    string VARIABLENAME, 
                    string REASON, 
                    string FIELDNAME, 
                    string INVID, 
                    string VISIT, 
                    string MODULENAME, 
                    string TRANSACT, 
                    string FIELDID, 
                    string ID, 
                    string USERID, 
                    string User_Name, 
                    string TZ_VAL) {
            this.DM_AUDITTRAIL_SPAsync(ACTION, PVID, RECID, SUBJID, VISITNUM, MODULEID, VARIABLENAME, REASON, FIELDNAME, INVID, VISIT, MODULENAME, TRANSACT, FIELDID, ID, USERID, User_Name, TZ_VAL, null);
        }
        
        /// <remarks/>
        public void DM_AUDITTRAIL_SPAsync(
                    string ACTION, 
                    string PVID, 
                    string RECID, 
                    string SUBJID, 
                    string VISITNUM, 
                    string MODULEID, 
                    string VARIABLENAME, 
                    string REASON, 
                    string FIELDNAME, 
                    string INVID, 
                    string VISIT, 
                    string MODULENAME, 
                    string TRANSACT, 
                    string FIELDID, 
                    string ID, 
                    string USERID, 
                    string User_Name, 
                    string TZ_VAL, 
                    object userState) {
            if ((this.DM_AUDITTRAIL_SPOperationCompleted == null)) {
                this.DM_AUDITTRAIL_SPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDM_AUDITTRAIL_SPOperationCompleted);
            }
            this.InvokeAsync("DM_AUDITTRAIL_SP", new object[] {
                        ACTION,
                        PVID,
                        RECID,
                        SUBJID,
                        VISITNUM,
                        MODULEID,
                        VARIABLENAME,
                        REASON,
                        FIELDNAME,
                        INVID,
                        VISIT,
                        MODULENAME,
                        TRANSACT,
                        FIELDID,
                        ID,
                        USERID,
                        User_Name,
                        TZ_VAL}, this.DM_AUDITTRAIL_SPOperationCompleted, userState);
        }
        
        private void OnDM_AUDITTRAIL_SPOperationCompleted(object arg) {
            if ((this.DM_AUDITTRAIL_SPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DM_AUDITTRAIL_SPCompleted(this, new DM_AUDITTRAIL_SPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DM_INSERT_MODULE_DATA_SP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DM_INSERT_MODULE_DATA_SP(
                    string ACTION, 
                    string TABLENAME, 
                    string PVID, 
                    string RECID, 
                    string INSERTQUERY, 
                    string UPDATEQUERY, 
                    string SUBJID, 
                    string VISITNUM, 
                    string INVID, 
                    string MODULEID, 
                    bool IsComplete, 
                    bool IsMissing, 
                    string VISIT, 
                    string MODULENAME, 
                    string USERID, 
                    string User_Name, 
                    string TZ_VAL) {
            object[] results = this.Invoke("DM_INSERT_MODULE_DATA_SP", new object[] {
                        ACTION,
                        TABLENAME,
                        PVID,
                        RECID,
                        INSERTQUERY,
                        UPDATEQUERY,
                        SUBJID,
                        VISITNUM,
                        INVID,
                        MODULEID,
                        IsComplete,
                        IsMissing,
                        VISIT,
                        MODULENAME,
                        USERID,
                        User_Name,
                        TZ_VAL});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DM_INSERT_MODULE_DATA_SPAsync(
                    string ACTION, 
                    string TABLENAME, 
                    string PVID, 
                    string RECID, 
                    string INSERTQUERY, 
                    string UPDATEQUERY, 
                    string SUBJID, 
                    string VISITNUM, 
                    string INVID, 
                    string MODULEID, 
                    bool IsComplete, 
                    bool IsMissing, 
                    string VISIT, 
                    string MODULENAME, 
                    string USERID, 
                    string User_Name, 
                    string TZ_VAL) {
            this.DM_INSERT_MODULE_DATA_SPAsync(ACTION, TABLENAME, PVID, RECID, INSERTQUERY, UPDATEQUERY, SUBJID, VISITNUM, INVID, MODULEID, IsComplete, IsMissing, VISIT, MODULENAME, USERID, User_Name, TZ_VAL, null);
        }
        
        /// <remarks/>
        public void DM_INSERT_MODULE_DATA_SPAsync(
                    string ACTION, 
                    string TABLENAME, 
                    string PVID, 
                    string RECID, 
                    string INSERTQUERY, 
                    string UPDATEQUERY, 
                    string SUBJID, 
                    string VISITNUM, 
                    string INVID, 
                    string MODULEID, 
                    bool IsComplete, 
                    bool IsMissing, 
                    string VISIT, 
                    string MODULENAME, 
                    string USERID, 
                    string User_Name, 
                    string TZ_VAL, 
                    object userState) {
            if ((this.DM_INSERT_MODULE_DATA_SPOperationCompleted == null)) {
                this.DM_INSERT_MODULE_DATA_SPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDM_INSERT_MODULE_DATA_SPOperationCompleted);
            }
            this.InvokeAsync("DM_INSERT_MODULE_DATA_SP", new object[] {
                        ACTION,
                        TABLENAME,
                        PVID,
                        RECID,
                        INSERTQUERY,
                        UPDATEQUERY,
                        SUBJID,
                        VISITNUM,
                        INVID,
                        MODULEID,
                        IsComplete,
                        IsMissing,
                        VISIT,
                        MODULENAME,
                        USERID,
                        User_Name,
                        TZ_VAL}, this.DM_INSERT_MODULE_DATA_SPOperationCompleted, userState);
        }
        
        private void OnDM_INSERT_MODULE_DATA_SPOperationCompleted(object arg) {
            if ((this.DM_INSERT_MODULE_DATA_SPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DM_INSERT_MODULE_DATA_SPCompleted(this, new DM_INSERT_MODULE_DATA_SPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DM_GetSetPV", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DM_GetSetPV(string Action, string PVID, string SUBJID, string VISITNUM, string MODULEID, string PAGESTATUS, bool HasMissing, string INVID, string NOTAPPLICABLE, string MODULENAME, string VISIT, string USERID, string TZ_VAL, string User_Name) {
            this.Invoke("DM_GetSetPV", new object[] {
                        Action,
                        PVID,
                        SUBJID,
                        VISITNUM,
                        MODULEID,
                        PAGESTATUS,
                        HasMissing,
                        INVID,
                        NOTAPPLICABLE,
                        MODULENAME,
                        VISIT,
                        USERID,
                        TZ_VAL,
                        User_Name});
        }
        
        /// <remarks/>
        public void DM_GetSetPVAsync(string Action, string PVID, string SUBJID, string VISITNUM, string MODULEID, string PAGESTATUS, bool HasMissing, string INVID, string NOTAPPLICABLE, string MODULENAME, string VISIT, string USERID, string TZ_VAL, string User_Name) {
            this.DM_GetSetPVAsync(Action, PVID, SUBJID, VISITNUM, MODULEID, PAGESTATUS, HasMissing, INVID, NOTAPPLICABLE, MODULENAME, VISIT, USERID, TZ_VAL, User_Name, null);
        }
        
        /// <remarks/>
        public void DM_GetSetPVAsync(string Action, string PVID, string SUBJID, string VISITNUM, string MODULEID, string PAGESTATUS, bool HasMissing, string INVID, string NOTAPPLICABLE, string MODULENAME, string VISIT, string USERID, string TZ_VAL, string User_Name, object userState) {
            if ((this.DM_GetSetPVOperationCompleted == null)) {
                this.DM_GetSetPVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDM_GetSetPVOperationCompleted);
            }
            this.InvokeAsync("DM_GetSetPV", new object[] {
                        Action,
                        PVID,
                        SUBJID,
                        VISITNUM,
                        MODULEID,
                        PAGESTATUS,
                        HasMissing,
                        INVID,
                        NOTAPPLICABLE,
                        MODULENAME,
                        VISIT,
                        USERID,
                        TZ_VAL,
                        User_Name}, this.DM_GetSetPVOperationCompleted, userState);
        }
        
        private void OnDM_GetSetPVOperationCompleted(object arg) {
            if ((this.DM_GetSetPVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DM_GetSetPVCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DM_DELETE_RECORDS_SP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DM_DELETE_RECORDS_SP(string PVID, string RECID, string INVID, string SUBJID, string VISITNUM, string MODULEID, string VISIT, string MODULENAME, string REASON, string USERID, string User_Name, string TZ_VAL) {
            object[] results = this.Invoke("DM_DELETE_RECORDS_SP", new object[] {
                        PVID,
                        RECID,
                        INVID,
                        SUBJID,
                        VISITNUM,
                        MODULEID,
                        VISIT,
                        MODULENAME,
                        REASON,
                        USERID,
                        User_Name,
                        TZ_VAL});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DM_DELETE_RECORDS_SPAsync(string PVID, string RECID, string INVID, string SUBJID, string VISITNUM, string MODULEID, string VISIT, string MODULENAME, string REASON, string USERID, string User_Name, string TZ_VAL) {
            this.DM_DELETE_RECORDS_SPAsync(PVID, RECID, INVID, SUBJID, VISITNUM, MODULEID, VISIT, MODULENAME, REASON, USERID, User_Name, TZ_VAL, null);
        }
        
        /// <remarks/>
        public void DM_DELETE_RECORDS_SPAsync(string PVID, string RECID, string INVID, string SUBJID, string VISITNUM, string MODULEID, string VISIT, string MODULENAME, string REASON, string USERID, string User_Name, string TZ_VAL, object userState) {
            if ((this.DM_DELETE_RECORDS_SPOperationCompleted == null)) {
                this.DM_DELETE_RECORDS_SPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDM_DELETE_RECORDS_SPOperationCompleted);
            }
            this.InvokeAsync("DM_DELETE_RECORDS_SP", new object[] {
                        PVID,
                        RECID,
                        INVID,
                        SUBJID,
                        VISITNUM,
                        MODULEID,
                        VISIT,
                        MODULENAME,
                        REASON,
                        USERID,
                        User_Name,
                        TZ_VAL}, this.DM_DELETE_RECORDS_SPOperationCompleted, userState);
        }
        
        private void OnDM_DELETE_RECORDS_SPOperationCompleted(object arg) {
            if ((this.DM_DELETE_RECORDS_SPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DM_DELETE_RECORDS_SPCompleted(this, new DM_DELETE_RECORDS_SPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CODING_SP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CODING_SP(string ACTION, string PVID, string RECID, string MODULEID, string VARIABLENAME, string USERID, string User_Name, string TZ_VAL) {
            object[] results = this.Invoke("CODING_SP", new object[] {
                        ACTION,
                        PVID,
                        RECID,
                        MODULEID,
                        VARIABLENAME,
                        USERID,
                        User_Name,
                        TZ_VAL});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CODING_SPAsync(string ACTION, string PVID, string RECID, string MODULEID, string VARIABLENAME, string USERID, string User_Name, string TZ_VAL) {
            this.CODING_SPAsync(ACTION, PVID, RECID, MODULEID, VARIABLENAME, USERID, User_Name, TZ_VAL, null);
        }
        
        /// <remarks/>
        public void CODING_SPAsync(string ACTION, string PVID, string RECID, string MODULEID, string VARIABLENAME, string USERID, string User_Name, string TZ_VAL, object userState) {
            if ((this.CODING_SPOperationCompleted == null)) {
                this.CODING_SPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCODING_SPOperationCompleted);
            }
            this.InvokeAsync("CODING_SP", new object[] {
                        ACTION,
                        PVID,
                        RECID,
                        MODULEID,
                        VARIABLENAME,
                        USERID,
                        User_Name,
                        TZ_VAL}, this.CODING_SPOperationCompleted, userState);
        }
        
        private void OnCODING_SPOperationCompleted(object arg) {
            if ((this.CODING_SPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CODING_SPCompleted(this, new CODING_SPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DM_SAE_SYNC_SP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DM_SAE_SYNC_SP(string ACTION, string PVID, string RECID, string MODULEID, string SUBJID) {
            object[] results = this.Invoke("DM_SAE_SYNC_SP", new object[] {
                        ACTION,
                        PVID,
                        RECID,
                        MODULEID,
                        SUBJID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DM_SAE_SYNC_SPAsync(string ACTION, string PVID, string RECID, string MODULEID, string SUBJID) {
            this.DM_SAE_SYNC_SPAsync(ACTION, PVID, RECID, MODULEID, SUBJID, null);
        }
        
        /// <remarks/>
        public void DM_SAE_SYNC_SPAsync(string ACTION, string PVID, string RECID, string MODULEID, string SUBJID, object userState) {
            if ((this.DM_SAE_SYNC_SPOperationCompleted == null)) {
                this.DM_SAE_SYNC_SPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDM_SAE_SYNC_SPOperationCompleted);
            }
            this.InvokeAsync("DM_SAE_SYNC_SP", new object[] {
                        ACTION,
                        PVID,
                        RECID,
                        MODULEID,
                        SUBJID}, this.DM_SAE_SYNC_SPOperationCompleted, userState);
        }
        
        private void OnDM_SAE_SYNC_SPOperationCompleted(object arg) {
            if ((this.DM_SAE_SYNC_SPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DM_SAE_SYNC_SPCompleted(this, new DM_SAE_SYNC_SPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DM_COMPLETE_DATA_SP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DM_COMPLETE_DATA_SP(string PVID, string RECID, string INVID, string SUBJID, string VISITNUM, string VISIT, string MODULEID, string MODULENAME, string USERID, string User_Name, string TZ_VAL) {
            object[] results = this.Invoke("DM_COMPLETE_DATA_SP", new object[] {
                        PVID,
                        RECID,
                        INVID,
                        SUBJID,
                        VISITNUM,
                        VISIT,
                        MODULEID,
                        MODULENAME,
                        USERID,
                        User_Name,
                        TZ_VAL});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DM_COMPLETE_DATA_SPAsync(string PVID, string RECID, string INVID, string SUBJID, string VISITNUM, string VISIT, string MODULEID, string MODULENAME, string USERID, string User_Name, string TZ_VAL) {
            this.DM_COMPLETE_DATA_SPAsync(PVID, RECID, INVID, SUBJID, VISITNUM, VISIT, MODULEID, MODULENAME, USERID, User_Name, TZ_VAL, null);
        }
        
        /// <remarks/>
        public void DM_COMPLETE_DATA_SPAsync(string PVID, string RECID, string INVID, string SUBJID, string VISITNUM, string VISIT, string MODULEID, string MODULENAME, string USERID, string User_Name, string TZ_VAL, object userState) {
            if ((this.DM_COMPLETE_DATA_SPOperationCompleted == null)) {
                this.DM_COMPLETE_DATA_SPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDM_COMPLETE_DATA_SPOperationCompleted);
            }
            this.InvokeAsync("DM_COMPLETE_DATA_SP", new object[] {
                        PVID,
                        RECID,
                        INVID,
                        SUBJID,
                        VISITNUM,
                        VISIT,
                        MODULEID,
                        MODULENAME,
                        USERID,
                        User_Name,
                        TZ_VAL}, this.DM_COMPLETE_DATA_SPOperationCompleted, userState);
        }
        
        private void OnDM_COMPLETE_DATA_SPOperationCompleted(object arg) {
            if ((this.DM_COMPLETE_DATA_SPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DM_COMPLETE_DATA_SPCompleted(this, new DM_COMPLETE_DATA_SPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DM_AUDITTRAIL_SPCompletedEventHandler(object sender, DM_AUDITTRAIL_SPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DM_AUDITTRAIL_SPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DM_AUDITTRAIL_SPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DM_INSERT_MODULE_DATA_SPCompletedEventHandler(object sender, DM_INSERT_MODULE_DATA_SPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DM_INSERT_MODULE_DATA_SPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DM_INSERT_MODULE_DATA_SPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DM_GetSetPVCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DM_DELETE_RECORDS_SPCompletedEventHandler(object sender, DM_DELETE_RECORDS_SPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DM_DELETE_RECORDS_SPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DM_DELETE_RECORDS_SPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CODING_SPCompletedEventHandler(object sender, CODING_SPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CODING_SPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CODING_SPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DM_SAE_SYNC_SPCompletedEventHandler(object sender, DM_SAE_SYNC_SPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DM_SAE_SYNC_SPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DM_SAE_SYNC_SPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DM_COMPLETE_DATA_SPCompletedEventHandler(object sender, DM_COMPLETE_DATA_SPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DM_COMPLETE_DATA_SPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DM_COMPLETE_DATA_SPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591